// <auto-generated />
using System;
using GeoApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GeoApi.Migrations
{
    [DbContext(typeof(GeoIconsContext))]
    partial class GeoIconsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GeoApi.Entity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContinetId")
                        .HasColumnType("int");

                    b.Property<string>("Denominacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Poblacion")
                        .HasColumnType("int");

                    b.Property<int>("Superficie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContinetId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("GeoApi.Entity.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Denominacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Continets");
                });

            modelBuilder.Entity("GeoApi.Entity.GeographicIcon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Altura")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("ContinentId")
                        .HasColumnType("int");

                    b.Property<string>("Denominacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Historia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ContinentId");

                    b.ToTable("GeographicIcons");
                });

            modelBuilder.Entity("GeoApi.Entity.City", b =>
                {
                    b.HasOne("GeoApi.Entity.Continent", "Continet")
                        .WithMany("Cities")
                        .HasForeignKey("ContinetId");

                    b.Navigation("Continet");
                });

            modelBuilder.Entity("GeoApi.Entity.GeographicIcon", b =>
                {
                    b.HasOne("GeoApi.Entity.City", "City")
                        .WithMany("GeographicIcons")
                        .HasForeignKey("CityId");

                    b.HasOne("GeoApi.Entity.Continent", null)
                        .WithMany("GeographicIcons")
                        .HasForeignKey("ContinentId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("GeoApi.Entity.City", b =>
                {
                    b.Navigation("GeographicIcons");
                });

            modelBuilder.Entity("GeoApi.Entity.Continent", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("GeographicIcons");
                });
#pragma warning restore 612, 618
        }
    }
}
